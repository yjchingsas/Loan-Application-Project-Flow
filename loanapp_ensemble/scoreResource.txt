

ds2_options scond=WARNING;
/* Rule Set Assign Model Used version 1.0 generated on Thu Mar 30 08:53:12 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;

/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_Assignu32Modelu32Used_1_0", referencedBy=Loan App Ensemble, name=Assign Model Used, nodeId=fd81e30f-57d9-4a7e-9304-0dd332917eb4, objectUri=/businessRules/ruleSets/0bc01e7f-923c-4c7e-a962-a4228a6982cb/revisions/151ce176-acdb-4a77-bbc6-92c2224d5d66 */
  package "Loanu32Appu32Ensemble_Assignu32Modelu32Used_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "Delinquencies",in_out varchar "Model_Status");

;
         if ("Delinquencies" < 1.0) then do;
         "Model_Status" = 'SAS Model';

goto "end_e89fac83-a42f-41f5-b98a-30a16b071792";end;
         else do;
         "Model_Status" = 'Python Model';

         end;

         "end_e89fac83-a42f-41f5-b98a-30a16b071792":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Appu32Ensemble_Assignu32Modelu32Used_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* Custom Object CreditCheckAPI retrieved on Thu Mar 30 08:53:12 UTC 2023 */ 
ds2_options sas;
/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_CreditCheckAPI_1_0", referencedBy=Loan App Ensemble, name=CreditCheckAPI, nodeId=1f6821a6-42dc-4e18-84de-630d19e0ff31, objectUri=/decisions/codeFiles/80532eaa-a46c-4569-8982-c45b1732fcf4/revisions/18732958-11a4-4edf-a366-8c686ccddbd3 */
package "Loanu32Appu32Ensemble_CreditCheckAPI_1_0" / inline;
    dcl package pymas py;
    dcl double pystop;
    dcl package logger logr('App.tk.SID.Python');

    method execute(
         varchar(10) CustomerID
        , in_out double CredLineAge
        , in_out double CredLines
        , in_out double DebtIncRatio
        , in_out double Delinquencies
        , in_out double DerogatoryMarks
        , in_out double Inquiries
    );

      dcl nvarchar(10485760) pypgm;
      dcl double rc;
      dcl double revision;
      if null(py) and pystop ^= 1 then do;
        py = _new_ pymas();
        if inmas() then do;
            rc = py.useModule('"Loanu32Appu32Ensemble_CreditCheckAPI_1_0_-1069893340"', 1);
        end;
        else do;
            rc = 1;
        end;
        if rc then do;
          rc = py.appendSrcLine('');
          rc = py.appendSrcLine(''''''' List all output parameters as comma-separated values in the "Output:" docString. Do not specify "None" if there is no output parameter.'''''' ');
          rc = py.appendSrcLine('import json ');
          rc = py.appendSrcLine('import requests ');
          rc = py.appendSrcLine(' ');
          rc = py.appendSrcLine('def execute (CustomerID):');
          rc = py.appendSrcLine('    ''Output:CredLineAge,CredLines,DebtIncRatio,Delinquencies,DerogatoryMarks,Inquiries'' ');
          rc = py.appendSrcLine('    ');
          rc = py.appendSrcLine('    ## (CustomerID: str) -> tuple');
          rc = py.appendSrcLine('    CredLineAge: int');
          rc = py.appendSrcLine('    CredLines: int');
          rc = py.appendSrcLine('    DebtIncRatio: int');
          rc = py.appendSrcLine('    Delinquencies: int');
          rc = py.appendSrcLine('    DerogatoryMarks: int');
          rc = py.appendSrcLine('    Inquiries: int');
          rc = py.appendSrcLine('    ');
          rc = py.appendSrcLine('    ## Create JSON payload with customer ID');
          rc = py.appendSrcLine('    payload = { "CustomerID": CustomerID} ');
          rc = py.appendSrcLine('    ## Perform call to external credit bureau API');
          rc = py.appendSrcLine('    cred_check = requests.post( ');
          rc = py.appendSrcLine('        url=''http://api.app.svc.cluster.local:5005/check'', ');
          rc = py.appendSrcLine('        headers={''Content-Type'': ''application/json''}, ');
          rc = py.appendSrcLine('        data = json.dumps(payload) ');
          rc = py.appendSrcLine('    ) ');
          rc = py.appendSrcLine('    CredLines = cred_check.json()[''CredLines''] ');
          rc = py.appendSrcLine('    CredLineAge = cred_check.json()[''CredLineAge'']');
          rc = py.appendSrcLine('    DebtIncRatio = cred_check.json()[''DebtIncRatio'']');
          rc = py.appendSrcLine('    Delinquencies = cred_check.json()[''Delinquencies'']');
          rc = py.appendSrcLine('    DerogatoryMarks = cred_check.json()[''DerogatoryMarks'']');
          rc = py.appendSrcLine('    Inquiries = cred_check.json()[''Inquiries'']');
          rc = py.appendSrcLine('    return CredLineAge,CredLines,DebtIncRatio,Delinquencies,DerogatoryMarks,Inquiries');
          pypgm = py.getSource();
          revision = py.publish(pypgm, '"Loanu32Appu32Ensemble_CreditCheckAPI_1_0_-1069893340"');
          if revision < 1 then do;
            pystop = 1;
            logr.log( 'e', 'publish revision=$s', revision );
            return;
          end;
        end;
        else do;
          logr.log( 'd', 'useModule rc=$s', rc );
        end;
        rc = py.useMethod('execute');
        if rc then do;
          pystop = 1;
          logr.log( 'e', 'useMethod rc=$s', rc );
          return;
        end;
      end;
      if pystop ^= 1 then do;
        rc = py.setString ('CustomerID', CustomerID);
        if rc then do;
          logr.log( 'e', 'set CustomerID rc=$s', rc );
          return;
        end;
        rc = py.execute();
        if rc then do;
           logr.log( 'd', 'execute rc=$s', rc );
           return;
        end;
        CredLineAge = py.getDouble('CredLineAge');
        CredLines = py.getDouble('CredLines');
        DebtIncRatio = py.getDouble('DebtIncRatio');
        Delinquencies = py.getDouble('Delinquencies');
        DerogatoryMarks = py.getDouble('DerogatoryMarks');
        Inquiries = py.getDouble('Inquiries');
      end;
    end;
/* PACKAGE_END: "Loanu32Appu32Ensemble_CreditCheckAPI_1_0" */
endpackage;
ds2_options scond=none;
/* Model Logistic Regression (Pipeline 1) version 2.0 retrieved on Thu Mar 30 08:53:12 UTC 2023 */ 
/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_Logisticu32Regressionu32u40Pipelineu321u41", referencedBy=Loan App Ensemble, name=Logistic Regression (Pipeline 1), nodeId=d5ca6ec3-6e98-404f-b42b-73a5f3ea827f, objectUri=/modelRepository/models/4e40ba67-1abe-4a6f-864b-8d1fe46a7003 */
/*----------------------------------------------------------------------------------*/
/* Product:            Visual Data Mining and Machine Learning                      */
/* Release Version:    V2023.01                                                     */
/* Component Version:  V2023.01                                                     */
/* CAS Version:        V.04.00M0P01172023                                           */
/* SAS Version:        V.04.00M0P011723                                             */
/* Site Number:        70180938                                                     */
/* Host:               sas-cas-server-default-client                                */
/* Encoding:           utf-8                                                        */
/* Java Encoding:      UTF8                                                         */
/* Locale:             en_US                                                        */
/* Project GUID:       c099929a-8b0e-4a46-9e67-075b5fa21895                         */
/* Node GUID:          c9bd0443-21b1-4d59-a16a-e35185f55c36                         */
/* Node Id:            BXYN6YT3CYU4CE4WA5GTNNZ1Y                                    */
/* Algorithm:          Logistic Regression                                          */
/* Generated by:       YiJian.Ching@sas.com                                         */
/* Date:               06MAR2023:08:04:15                                           */
/*----------------------------------------------------------------------------------*/
package "Loanu32Appu32Ensemble_Logisticu32Regressionu32u40Pipelineu321u41" / overwrite=yes;
   dcl double "Delinquencies";
   dcl double "P_Default0" having label n'Predicted: Default=0';
   dcl double "P_Default1" having label n'Predicted: Default=1';
   dcl nchar(12) "I_Default" having label n'Into: Default';
   dcl double "EM_EVENTPROBABILITY";
   dcl nchar(12) "EM_CLASSIFICATION";
   dcl double "EM_PROBABILITY";
   varlist allvars [_all_];

   method _BXYN6YT3CYU4CE4WA5GTNNZ1Y();
      dcl double _P_;
      dcl double MACLOGBIG;
      dcl double _J_;
      dcl double _I_;
      dcl double _TEMP_;
      dcl double _LINP_;
      dcl double _BADVAL_;
      dcl nchar(2) _DELINQUENCIES_;
      dcl nchar(12) _LEVELS_66456013_[2];
      dcl double _BETA_66456013_0_[11];
      dcl double _XROW_66456013_0_[11];

      _LEVELS_66456013_:=('1', '0');
      _BETA_66456013_0_:=(10.9023671851812, -13.600069917758, -13.0424333486775,
      -12.0810221815229, -13.3301154211293, -12.1551301536766, -10.055069324794,
      -4.1095457568212E-9, -4.268191757943E-9, 0, 0);
      _BADVAL_ = 0.0;
      _LINP_ = 0.0;
      _TEMP_ = 0.0;
      _I_ = 0.0;
      _J_ = 0.0;
      MACLOGBIG = 7.0978271289338392E+02;
      _DELINQUENCIES_ = LEFT(TRIM(put(DELINQUENCIES, BEST2.)));
      do _I_ = 1.0 to 11.0;
      _XROW_66456013_0_[_I_] = 0.0;
      end;
      _XROW_66456013_0_[1.0] = 1.0;
      _TEMP_ = 1.0;
      select (_DELINQUENCIES_);
      when ('0') _XROW_66456013_0_[2.0] = _TEMP_;
      when ('1') _XROW_66456013_0_[3.0] = _TEMP_;
      when ('2') _XROW_66456013_0_[4.0] = _TEMP_;
      when ('3') _XROW_66456013_0_[5.0] = _TEMP_;
      when ('4') _XROW_66456013_0_[6.0] = _TEMP_;
      when ('5') _XROW_66456013_0_[7.0] = _TEMP_;
      when ('6') _XROW_66456013_0_[8.0] = _TEMP_;
      when ('7') _XROW_66456013_0_[9.0] = _TEMP_;
      when ('8') _XROW_66456013_0_[10.0] = _TEMP_;
      when ('10') _XROW_66456013_0_[11.0] = _TEMP_;
      otherwise do ;
      _BADVAL_ = 1.0;
      goto SKIP_66456013_0;
      end;
      end;
      do _I_ = 1.0 to 11.0;
      _LINP_ + _XROW_66456013_0_[_I_] * _BETA_66456013_0_[_I_];
      end;
      SKIP_66456013_0: if (_BADVAL_ = 0.0) & ^MISSING(_LINP_) then do ;
      if (_LINP_ > 0.0) then do ;
      P_DEFAULT1 = 1.0 / (1.0 + EXP(-_LINP_));
      end;
      else do ;
      P_DEFAULT1 = EXP(_LINP_) / (1.0 + EXP(_LINP_));
      end;
      P_DEFAULT0 = 1.0 - P_DEFAULT1;
      if P_DEFAULT1 >= 0.5 then do ;
      I_DEFAULT = _LEVELS_66456013_[1.0];
      end;
      else do ;
      I_DEFAULT = _LEVELS_66456013_[2.0];
      end;
      end;
      else do ;
      _LINP_ = .;
      P_DEFAULT1 = .;
      P_DEFAULT0 = .;
      I_DEFAULT = ' ';
      end;
      if "P_DEFAULT1" = . then "P_DEFAULT1" = 0.0789224953;
      if "P_DEFAULT0" = . then "P_DEFAULT0" = 0.9210775047;
      if MISSING("I_DEFAULT") then do ;
      _P_ = 0.0;
      if "P_DEFAULT1" > _P_ then do ;
      _P_ = "P_DEFAULT1";
      "I_DEFAULT" = '           1';
      end;
      if "P_DEFAULT0" > _P_ then do ;
      _P_ = "P_DEFAULT0";
      "I_DEFAULT" = '           0';
      end;
      end;
      EM_EVENTPROBABILITY = "P_DEFAULT1";
      EM_CLASSIFICATION = "I_DEFAULT";
      EM_PROBABILITY = MAX("P_DEFAULT1", "P_DEFAULT0");

   end;

   method score(
      double "Delinquencies",
      IN_OUT char(12) "EM_CLASSIFICATION",
      IN_OUT double "EM_EVENTPROBABILITY",
      IN_OUT double "EM_PROBABILITY",
      IN_OUT char(12) "I_Default",
      IN_OUT double "P_Default0",
      IN_OUT double "P_Default1"
   );
      this."Delinquencies"= "Delinquencies";

      _BXYN6YT3CYU4CE4WA5GTNNZ1Y();

      "EM_CLASSIFICATION"= this."EM_CLASSIFICATION";
      "EM_EVENTPROBABILITY"= this."EM_EVENTPROBABILITY";
      "EM_PROBABILITY"= this."EM_PROBABILITY";
      "I_Default"= this."I_Default";
      "P_Default0"= this."P_Default0";
      "P_Default1"= this."P_Default1";
   end;

   method predictedscore(
      double "Delinquencies",
      IN_OUT char(12) "EM_CLASSIFICATION",
      IN_OUT double "EM_EVENTPROBABILITY",
      IN_OUT double "EM_PROBABILITY",
      IN_OUT char(12) "I_Default",
      IN_OUT double "P_Default0",
      IN_OUT double "P_Default1"
   );
      this."Delinquencies"= "Delinquencies";

      _BXYN6YT3CYU4CE4WA5GTNNZ1Y();

      "EM_CLASSIFICATION"= this."EM_CLASSIFICATION";
      "EM_EVENTPROBABILITY"= this."EM_EVENTPROBABILITY";
      "EM_PROBABILITY"= this."EM_PROBABILITY";
      "I_Default"= this."I_Default";
      "P_Default0"= this."P_Default0";
      "P_Default1"= this."P_Default1";
   end;

/* PACKAGE_END: "Loanu32Appu32Ensemble_Logisticu32Regressionu32u40Pipelineu321u41" */
endpackage;

ds2_options scond=none;
/* Model Python GradientBoosting (Pipeline 1) version 4.0 retrieved on Thu Mar 30 08:53:12 UTC 2023 */ 
/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_Pythonu32GradientBoostingu32u40Pipelineu321u41", referencedBy=Loan App Ensemble, name=Python GradientBoosting (Pipeline 1), nodeId=88eb16e2-a3ec-4db6-87a6-13d2d6880a99, objectUri=/modelRepository/models/bded23e3-0744-4136-9f8b-205452133a61 */
package "Loanu32Appu32Ensemble_Pythonu32GradientBoostingu32u40Pipelineu321u41" / overwrite=yes;
dcl package pymas pm;
dcl package logger logr('App.MM.Python.DS2');
dcl varchar(32767) character set utf8 pypgm;
dcl int resultCode revision;

method score(double "CredLineAge",
double "CredLines",
double "DebtIncRatio",
double "Delinquencies",
double "DerogatoryMarks",
double "HomeValue",
double "Income",
double "Inquiries",
varchar(100) "JobType",
double "LoanRequest",
double "LoanToValue",
double "YearsOnJob",
in_out double resultCode,
in_out double "P_Default0",
in_out double "P_Default1",
in_out varchar(100) "I_Default");

   resultCode = revision = 0;
   if null(pm) then do;
      pm = _new_ pymas();
      resultCode = pm.useModule('model_exec_1ed59dba-130f-4b3a-ab78-d7ae8e9dc712', 1);
      if resultCode then do;
         resultCode = pm.appendSrcLine('import sys');
         resultCode = pm.appendSrcLine('sys.path.append("/models/resources/viya/bded23e3-0744-4136-9f8b-205452133a61/")');
         resultCode = pm.appendSrcLine('import settings_bded23e3_0744_4136_9f8b_205452133a61');
         resultCode = pm.appendSrcLine('settings_bded23e3_0744_4136_9f8b_205452133a61.pickle_path = "/models/resources/viya/bded23e3-0744-4136-9f8b-205452133a61/"');
         resultCode = pm.appendSrcLine('import _4eciaroqodklgq7s8o0p6y4r5_48753358_dc2d_4bcb_bb57_ca96bbb5c302');
         resultCode = pm.appendSrcLine('def score_method(Delinquencies, DerogatoryMarks, Inquiries, JobType, CredLineAge, CredLines, DebtIncRatio, LoanRequest, HomeValue, Income, LoanToValue, YearsOnJob):');
         resultCode = pm.appendSrcLine('    "Output: P_Default0, P_Default1, I_Default"');
         resultCode = pm.appendSrcLine('    return _4eciaroqodklgq7s8o0p6y4r5_48753358_dc2d_4bcb_bb57_ca96bbb5c302.score_method(Delinquencies, DerogatoryMarks, Inquiries, JobType, CredLineAge, CredLines, DebtIncRatio, LoanRequest, HomeValue, Income, LoanToValue, YearsOnJob)');

         revision = pm.publish(pm.getSource(), 'model_exec_1ed59dba-130f-4b3a-ab78-d7ae8e9dc712');
         if ( revision < 1 ) then do;
            logr.log( 'e', 'py.publish() failed.');
            resultCode = -1;
            return;
         end;
      end;
   end;

   resultCode = pm.useMethod('score_method');
   if resultCode then do;
      logr.log('E', 'useMethod() failed. resultCode=$s', resultCode);
      return;
   end;
   resultCode = pm.setDouble('CredLineAge', CredLineAge);
   if resultCode then
      logr.log('E', 'setDouble for CredLineAge failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('CredLines', CredLines);
   if resultCode then
      logr.log('E', 'setDouble for CredLines failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('DebtIncRatio', DebtIncRatio);
   if resultCode then
      logr.log('E', 'setDouble for DebtIncRatio failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('Delinquencies', Delinquencies);
   if resultCode then
      logr.log('E', 'setDouble for Delinquencies failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('DerogatoryMarks', DerogatoryMarks);
   if resultCode then
      logr.log('E', 'setDouble for DerogatoryMarks failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('HomeValue', HomeValue);
   if resultCode then
      logr.log('E', 'setDouble for HomeValue failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('Income', Income);
   if resultCode then
      logr.log('E', 'setDouble for Income failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('Inquiries', Inquiries);
   if resultCode then
      logr.log('E', 'setDouble for Inquiries failed.  resultCode=$s', resultCode);
   resultCode = pm.setString('JobType', JobType);
   if resultCode then
      logr.log('E', 'setString for JobType failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('LoanRequest', LoanRequest);
   if resultCode then
      logr.log('E', 'setDouble for LoanRequest failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('LoanToValue', LoanToValue);
   if resultCode then
      logr.log('E', 'setDouble for LoanToValue failed.  resultCode=$s', resultCode);
   resultCode = pm.setDouble('YearsOnJob', YearsOnJob);
   if resultCode then
      logr.log('E', 'setDouble for YearsOnJob failed.  resultCode=$s', resultCode);
   resultCode = pm.execute();
   if (resultCode) then
      logr.log('E', 'Error: pm.execute failed.  resultCode=$s', resultCode);
   else do;
      "P_Default0" = pm.getDouble('P_Default0');
      "P_Default1" = pm.getDouble('P_Default1');
      "I_Default" = pm.getString('I_Default');
   end;
end;

/* PACKAGE_END: "Loanu32Appu32Ensemble_Pythonu32GradientBoostingu32u40Pipelineu321u41" */
endpackage;

ds2_options scond=WARNING;
/* Rule Set highRiskModelScoreRule version 1.0 generated on Thu Mar 30 08:53:12 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;

/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0", referencedBy=Loan App Ensemble, name=highRiskModelScoreRule, nodeId=7bfecc2b-5726-4e9f-800a-3184a86df07b, objectUri=/businessRules/ruleSets/db98e5e7-00b9-4317-afd7-110fee87a41d/revisions/a01efdb9-eb22-4d80-a4b1-b663da98f380 */
  package "Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "P_Default1",in_out varchar "Status");

;
         if ("P_Default1" < .10) then do;
         "Status" = 'Approved';

goto "end_151630d5-be73-494c-8463-96f4edc5172c";end;
         else do;
         "Status" = 'Declined';

         end;

         "end_151630d5-be73-494c-8463-96f4edc5172c":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* Rule Set loanToValueRule version 1.0 generated on Thu Mar 30 08:53:12 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;

/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_loanToValueRule_1_0", referencedBy=Loan App Ensemble, name=loanToValueRule, nodeId=0fb4a797-84cf-40d0-bfa8-e7c97693870f, objectUri=/businessRules/ruleSets/11df70a9-722f-4727-84de-39835a8778b9/revisions/2aceab2f-0af6-4012-af2c-e89d588d2c77 */
  package "Loanu32Appu32Ensemble_loanToValueRule_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "CredLineAge",in_out double "CredLines",in_out varchar "CustomerID",in_out double "DebtIncRatio",in_out double "Default",in_out double "Delinquencies",in_out double "DerogatoryMarks",in_out double "HomeValue",in_out double "Income",in_out double "Inquiries",in_out varchar "JobType",in_out double "LoanRequest",in_out double "LoanToValue",in_out varchar "Status",in_out double "YearsOnJob");

;
         if ("LoanToValue" >= .80) then do;
         "Status" = 'Declined';

         end;

         "end_648c4f1c-a387-45cf-8ca8-1daa55043917":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Appu32Ensemble_loanToValueRule_1_0" */
  endpackage;
ds2_options scond=WARNING;
/* Rule Set lowRiskModelScoreRule version 1.0 generated on Thu Mar 30 08:53:12 UTC 2023 */

DS2_OPTIONS LOGICALEXPR = STANDARD;
DS2_OPTIONS SCOND = WARNING;

/* PACKAGE_START: packageName="Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0", referencedBy=Loan App Ensemble, name=lowRiskModelScoreRule, nodeId=319012a3-e2ce-4944-b85d-bab02fff3e97, objectUri=/businessRules/ruleSets/c5038f90-ffea-47d4-9e21-4a4353ad3a52/revisions/cf1cca4a-e513-463b-8989-2792fe4d3ad1 */
  package "Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0"  / inline;

      dcl package logger _logger('App.SASDCM');
      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');

        /* ---- RULE FIRED FLAG COUNT = 0 ---- */
            method setruleFiredBasePosition(integer newBasePosition); end;
            method setDecisionNodeID(varchar newDecisonNodeID); end;
            method enableRuleFiredRecording(); end;
            method disableRuleFiredRecording(); end;
            method initRuleFireHashes(); end;
            method getRuleFiredFlagCount() returns integer;  return 0; end;
            method recordRuleFired(
              in_out char    ruleFiredFlags,
              in_out integer rulesFiredForRecordCount,
              char(36)       this_rule_id);
            end;

    method execute( in_out double "P_Default1",in_out varchar "Status");

;
         if ("P_Default1" < .3) then do;
         "Status" = 'Approved';

goto "end_32723d1e-71ec-438b-98bd-50253032e7c2";end;
         else do;
         "Status" = 'Declined';

         end;

         "end_32723d1e-71ec-438b-98bd-50253032e7c2":

      rule_end:  /* label for rule RETURN action */
    end;

/* PACKAGE_END: "Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0" */
  endpackage;

  DS2_OPTIONS LOGICALEXPR = STANDARD;
  DS2_OPTIONS SCOND = WARNING;
  DS2_OPTIONS MISSING_NOTE;

/* Decision Loan App Ensemble version 1.0 generated on Thu Mar 30 08:53:12 UTC 2023 */
/* {PACKAGE_START} */
  package loanapp_ensemble  / inline;
    dcl package logger logr_perf('App.tk.SID.Perf');
    dcl double timer_start;
    dcl double elapsed_time;
    dcl double total_timer_start;
    dcl double total_elapsed_time;

    dcl package "Loanu32Appu32Ensemble_Assignu32Modelu32Used_1_0" "Loanu32Appu32Ensemble_Assignu32Modelu32Used_1_0_hdl"();
    dcl package "Loanu32Appu32Ensemble_CreditCheckAPI_1_0" "Loanu32Appu32Ensemble_CreditCheckAPI_1_0_hdl"();
    dcl package "Loanu32Appu32Ensemble_Logisticu32Regressionu32u40Pipelineu321u41" "Loanu32Appu32Ensemble_Logisticu32Regressionu32u40Pipelineu321u41_hdl"();
    dcl package "Loanu32Appu32Ensemble_Pythonu32GradientBoostingu32u40Pipelineu321u41" "Loanu32Appu32Ensemble_Pythonu32GradientBoostingu32u40Pipelineu321u41_hdl"();
    dcl package "Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0" "Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0_hdl"();
    dcl package "Loanu32Appu32Ensemble_loanToValueRule_1_0" "Loanu32Appu32Ensemble_loanToValueRule_1_0_hdl"();
    dcl package "Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0" "Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0_hdl"();

     method init();

     end;

    method execute_internal(
       in_out double "CredLineAge"
      ,in_out double "CredLines"
      ,in_out varchar "CustomerID"
      ,in_out double "DebtIncRatio"
      ,in_out double "Delinquencies"
      ,in_out double "DerogatoryMarks"
      ,in_out double "HomeValue"
      ,in_out double "Income"
      ,in_out double "Inquiries"
      ,in_out varchar "JobType"
      ,in_out double "LoanRequest"
      ,in_out double "LoanToValue"
      ,in_out double "YearsOnJob"
      ,in_out varchar "Model_Status"
      ,in_out double "P_Default0"
      ,in_out double "P_Default1"
      ,in_out varchar "Status"

      ,in_out integer "_filter_"

    );
        dcl integer dg_filter_;

       dcl double "Default";
       dcl varchar(100) "EM_CLASSIFICATION";
       dcl double "EM_EVENTPROBABILITY";
       dcl double "EM_PROBABILITY";
       dcl varchar(100) "I_Default";

       dcl integer _masRC;

        total_timer_start = datetime();

"Model_Status" = 'undefined';

        timer_start = datetime();
        "Loanu32Appu32Ensemble_loanToValueRule_1_0_hdl".execute("CredLineAge", "CredLines", "CustomerID", "DebtIncRatio", "Default", "Delinquencies", "DerogatoryMarks", "HomeValue", "Income", "Inquiries", "JobType", "LoanRequest", "LoanToValue", "Status", "YearsOnJob");
        elapsed_time = datetime() - timer_start;
        logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: loanToValueRule, Node ID: 0fb4a797-84cf-40d0-bfa8-e7c97693870f, NODE DURATION: ' .. elapsed_time);

        if ( Status='Declined' ) then do;

        end;
        else do;

             timer_start = datetime();
             "Loanu32Appu32Ensemble_CreditCheckAPI_1_0_hdl".execute("CustomerID", "CredLineAge", "CredLines", "DebtIncRatio", "Delinquencies", "DerogatoryMarks", "Inquiries");
             elapsed_time = datetime() - timer_start;
             logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: CreditCheckAPI, Node ID: 1f6821a6-42dc-4e18-84de-630d19e0ff31, NODE DURATION: ' .. elapsed_time);

             timer_start = datetime();
             "Loanu32Appu32Ensemble_Assignu32Modelu32Used_1_0_hdl".execute("Delinquencies", "Model_Status");
             elapsed_time = datetime() - timer_start;
             logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: Assign Model Used, Node ID: fd81e30f-57d9-4a7e-9304-0dd332917eb4, NODE DURATION: ' .. elapsed_time);

             /*begin branch node*/
             if ( "Model_Status" eq 'SAS Model' )
              then do;

                  timer_start = datetime();
                  "Loanu32Appu32Ensemble_Logisticu32Regressionu32u40Pipelineu321u41_hdl".score("Delinquencies", "EM_CLASSIFICATION", "EM_EVENTPROBABILITY", "EM_PROBABILITY", "I_Default", "P_Default0", "P_Default1");
                  elapsed_time = datetime() - timer_start;
                  logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: Logistic Regression (Pipeline 1), Node ID: d5ca6ec3-6e98-404f-b42b-73a5f3ea827f, NODE DURATION: ' .. elapsed_time);

/*model code*/;

                  if ( YearsOnJob < 1 ) then do;

                       timer_start = datetime();
                       "Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0_hdl".execute("P_Default1", "Status");
                       elapsed_time = datetime() - timer_start;
                       logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: highRiskModelScoreRule, Node ID: 7bfecc2b-5726-4e9f-800a-3184a86df07b, NODE DURATION: ' .. elapsed_time);

                  end;
                  else do;

                       timer_start = datetime();
                       "Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0_hdl".execute("P_Default1", "Status");
                       elapsed_time = datetime() - timer_start;
                       logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: lowRiskModelScoreRule, Node ID: 319012a3-e2ce-4944-b85d-bab02fff3e97, NODE DURATION: ' .. elapsed_time);

                  end;

             end;
             else if ( "Model_Status" eq 'Python Model' )
              then do;

                       timer_start = datetime();
                       "Loanu32Appu32Ensemble_Pythonu32GradientBoostingu32u40Pipelineu321u41_hdl".score("CredLineAge", "CredLines", "DebtIncRatio", "Delinquencies", "DerogatoryMarks", "HomeValue", "Income", "Inquiries", "JobType", "LoanRequest", "LoanToValue", "YearsOnJob", "resultCode", "P_Default0", "P_Default1", "I_Default");
                       elapsed_time = datetime() - timer_start;
                       logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: Python GradientBoosting (Pipeline 1), Node ID: 88eb16e2-a3ec-4db6-87a6-13d2d6880a99, NODE DURATION: ' .. elapsed_time);

/*model code*/;

                       if ( YearsOnJob < 1 ) then do;

                            timer_start = datetime();
                            "Loanu32Appu32Ensemble_highRiskModelScoreRule_1_0_hdl".execute("P_Default1", "Status");
                            elapsed_time = datetime() - timer_start;
                            logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: highRiskModelScoreRule, Node ID: 191e61a8-c60d-4684-a935-e9e44ddb2c96, NODE DURATION: ' .. elapsed_time);

                       end;
                       else do;

                            timer_start = datetime();
                            "Loanu32Appu32Ensemble_lowRiskModelScoreRule_1_0_hdl".execute("P_Default1", "Status");
                            elapsed_time = datetime() - timer_start;
                            logr_perf.log( 'd', 'Package Name: loanapp_ensemble, Node Name: lowRiskModelScoreRule, Node ID: e84c1f44-c1a0-41bb-b56d-d554d21cb8e5, NODE DURATION: ' .. elapsed_time);

                       end;

             end;

             else do;

             end;

             /*end branch node*/
        end;

        "end":/*label for decision node link to flow end*/

        total_elapsed_time = datetime() - total_timer_start;
        logr_perf.log( 'd', 'Package Name: loanapp_ensemble, TOTAL DURATION: ' .. total_elapsed_time);

     end;

    method execute(
       double "CredLineAge_"
      ,double "CredLines_"
      ,varchar(10) "CustomerID_"
      ,double "DebtIncRatio_"
      ,double "Delinquencies_"
      ,double "DerogatoryMarks_"
      ,double "HomeValue_"
      ,double "Income_"
      ,double "Inquiries_"
      ,varchar(7) "JobType_"
      ,double "LoanRequest_"
      ,double "LoanToValue_"
      ,double "YearsOnJob_"
      ,in_out double "CredLineAge"
      ,in_out double "CredLines"
      ,in_out varchar "CustomerID"
      ,in_out double "DebtIncRatio"
      ,in_out double "Delinquencies"
      ,in_out double "DerogatoryMarks"
      ,in_out double "HomeValue"
      ,in_out double "Income"
      ,in_out double "Inquiries"
      ,in_out varchar "JobType"
      ,in_out double "LoanRequest"
      ,in_out double "LoanToValue"
      ,in_out varchar "Model_Status"
      ,in_out double "P_Default0"
      ,in_out double "P_Default1"
      ,in_out varchar "Status"
      ,in_out double "YearsOnJob"
);

      dcl integer _filter_;

          "CredLineAge" = "CredLineAge_";
      "CredLines" = "CredLines_";
      "CustomerID" = "CustomerID_";
      "DebtIncRatio" = "DebtIncRatio_";
      "Delinquencies" = "Delinquencies_";
      "DerogatoryMarks" = "DerogatoryMarks_";
      "HomeValue" = "HomeValue_";
      "Income" = "Income_";
      "Inquiries" = "Inquiries_";
      "JobType" = "JobType_";
      "LoanRequest" = "LoanRequest_";
      "LoanToValue" = "LoanToValue_";
      "YearsOnJob" = "YearsOnJob_";

          execute_internal(
          "CredLineAge"
         ,"CredLines"
         ,"CustomerID"
         ,"DebtIncRatio"
         ,"Delinquencies"
         ,"DerogatoryMarks"
         ,"HomeValue"
         ,"Income"
         ,"Inquiries"
         ,"JobType"
         ,"LoanRequest"
         ,"LoanToValue"
         ,"YearsOnJob"
         ,"Model_Status"
         ,"P_Default0"
         ,"P_Default1"
         ,"Status"
      ,"_filter_"
      );

    end;

    /* {PACKAGE_END} */
      endpackage;
